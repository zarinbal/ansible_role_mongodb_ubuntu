---
- name: install | detect Ubuntu version
  set_fact:
    ubuntu_version: "{{ ansible_distribution_release }}"

- name: install | validate Ubuntu version
  assert:
    that:
      - ubuntu_version in ['jammy', 'noble']
    msg: "This role only supports Ubuntu 22.04 (jammy) and 24.04 (noble). Current version: {{ ubuntu_version }}"

- name: install | validate MongoDB version
  assert:
    that:
      - mongo_version is match("^[0-9]+\\.[0-9]+(\\.[0-9]+)?(\\*)?$")
    msg: "Invalid MongoDB version format. Use format like '6.0', '6.0.15', '6.0.*', or '6.*'"

- name: install | check MongoDB version compatibility
  assert:
    that:
      - mongo_version is match("^6\\.[0-9]+(\\.[0-9]+)?(\\*)?$") or 
        mongo_version is match("^7\\.[0-9]+(\\.[0-9]+)?(\\*)?$") or 
        mongo_version is match("^8\\.[0-9]+(\\.[0-9]+)?(\\*)?$")
    msg: "MongoDB version {{ mongo_version }} is not supported on Ubuntu {{ ubuntu_version }}. Supported versions are 6.0, 6.1, 6.2, 7.0, 8.0"

- name: install | normalize MongoDB version for APT and repo
  set_fact:
    mongo_version_normalized: "{{ mongo_version | regex_replace('\\*', '') | regex_replace('\\.$', '') }}"
    mongo_version_major_minor: "{{ mongo_version | regex_search('^[0-9]+\\.[0-9]+') }}"
    
- name: install | normalize MongoDB edition for APT and repo
  set_fact:
    mongo_edition_normalized: "mongodb-{{ mongo_edition }}"

- name: DEBUG | Role is being executed
  debug:
    msg: "MongoDB role is running {{ mongo_version }} (normalized: {{ mongo_version_normalized }}, major.minor: {{ mongo_version_major_minor }}) on {{ ubuntu_version }}"

- name: install | dependencies
  apt:
    name: 
      - gnupg
      - python3-dev
      - python3-pip
    update_cache: true
  when: mongo_repo

- name: install | gpg key
  ansible.builtin.get_url:
    url: "https://pgp.mongodb.com/server-{{ mongo_version_major_minor }}.asc"
    dest: "/etc/apt/keyrings/mongo-server.asc"
    mode: 0644


- name: install | repo
  apt_repository:
    repo: >-
      deb [arch=amd64,arm64 signed-by=/etc/apt/keyrings/mongo-server.asc]
      https://repo.mongodb.org/apt/ubuntu {{ ubuntu_version }}/mongodb-org/{{ mongo_version_major_minor }} multiverse
    filename: "mongodb-{{ mongo_edition }}-{{ mongo_version_normalized }}"
    state: present

- name: install | group mongodb
  group:
    name: mongodb
    gid: 28
    system: true

- name: install | user mongodb
  user:
    name: mongodb
    uid: 28
    system: true
    group: mongodb
    comment: 'MongoDB Server'
    home: "{{ mongo_storage.dbPath }}"
    create_home: false
    shell: /sbin/nologin
  register: set_user


- name: install | mongo edition and components (pinned)
  apt:
    name:
      - "{{ mongo_edition_normalized }}={{ mongo_version }}*"
      - "{{ mongo_edition_normalized }}-server={{ mongo_version }}*"
      - "{{ mongo_edition_normalized }}-shell={{ mongo_version }}*"
      - "{{ mongo_edition_normalized }}-mongos={{ mongo_version }}*"
      - "{{ mongo_edition_normalized }}-tools={{ mongo_version }}*"
    state: present
  when: mongo_pin_version | default(true)

- name: install | mongo edition (unpinned)
  apt:
    name: "{{ mongo_edition_normalized }}={{ mongo_version }}*"
    state: present
  when: not mongo_pin_version | default(true)

- name: install | mongo edition {{ mongo_edition }}
  apt:
    name: >-
      {{ "mongodb-" + mongo_edition + '=' + mongo_version  }}
    state: present

- name: Pin MongoDB package version
  copy:
    content: |
      Package: {{ "mongodb-" + mongo_edition }}
      Pin: version {{ mongo_version | default('8.0.*') }}
      Pin-Priority: 1000
    dest: /etc/apt/preferences.d/mongodb
    mode: '0644'
  when: mongo_pin_version | default(true)

- name: install | data folder
  file:
    state: directory
    path: "{{ mongo_storage.dbPath }}"
    mode: 0755
    owner: mongodb
    group: mongodb

- name: install | remove default data folder when set differently
  file:
    state: absent
    path: /var/lib/mongodb
  when: mongo_storage.dbPath != '/var/lib/mongodb'

- name: install | remove log folder when set differently
  file:
    state: absent
    path: /var/log/mongodb
  when: >-
    '/var/log/mongodb' not in mongo_systemlog.path or
    mongo_systemlog.destination != 'file'

- block:

    - name: install | ensure log folder exists
      file:
        path: "{{ mongo_systemlog.path | dirname }}"
        state: directory
        owner: mongodb
        group: mongodb
        mode: '0775'

    - name: install | stat if log file exist
      stat:
        path: "{{ mongo_systemlog.path }}"
      register: mongo_log_check

    - name: install | ensure log files exist
      copy:
        content: ""
        dest: "{{ mongo_systemlog.path }}"
        force: true
        group: mongodb
        owner: mongodb
        mode: '0755'
      when: not mongo_log_check.stat.exists

  when: >-
    '/var/log/mongodb' not in mongo_systemlog.path and
    mongo_systemlog.destination == 'file'

- name: install | pymongo {{ mongo_pymongo_version }}
  pip:
    name: pymongo
    executable: pip3
    version: "{{ mongo_pymongo_version }}"
    extra_args: --break-system-packages